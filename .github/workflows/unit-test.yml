# This is a basic workflow to help you get started with Actions

name: CI Testing

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - develop
    - feature/*
    - master 
    - bugfix/*
    - hotfix/*

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    test:
      name: Run Unit Test
      runs-on: macOS-latest
      strategy:
        matrix:
          xcode: ['/Applications/Xcode_11.4.app/Contents/Developer']
      steps:
        - name: Checkout Branch
          uses: actions/checkout@v1
        - name: Install Dependencies
          run: bundle install 
#           env:
#             BUNDLE_GITHUB__COM: x-access-token:${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}
        - name: Check iOS Simulators existence
          id: check_simulator
          uses: andstor/file-existence-action@v1
          with:
            files: "/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 11.4.simruntime, /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 12.4.simruntime, /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 13.6.simruntime"
        - name: iOS Simulator Cores exists
          if: steps.check_simulator.outputs.files_exists == 'true'
          # Only runs if all of the conditions true
          run: echo All Simulator Core Exists!
        - name: Installing iOS Simulators
          if: steps.check_simulator.outputs.files_exists == 'false'
          # Only runs if iOS Simulator didn't exists
          run: |
            bundle exec xcversion simulators --install="iOS 11.4 Simulator" --verbose --no-progress
            bundle exec xcversion simulators --install="iOS 12.4 Simulator" --verbose --no-progress
            bundle exec xcversion simulators --install="iOS 13.6 Simulator" --verbose --no-progress
            xcrun simctl list runtimes
            xcrun simctl list devicetypes
        - name: Creating iOS Simulators
          run: |
            xcrun simctl create "iPhone 8" com.apple.CoreSimulator.SimDeviceType.iPhone-8 com.apple.CoreSimulator.SimRuntime.iOS-11-4
            xcrun simctl create "iPhone SE" com.apple.CoreSimulator.SimDeviceType.iPhone-SE com.apple.CoreSimulator.SimRuntime.iOS-12-4
            xcrun simctl create "iPhone X" com.apple.CoreSimulator.SimDeviceType.iPhone-X "com.apple.CoreSimulator.SimRuntime.iOS-13-6"
            xcrun simctl create "iPad Air" com.apple.CoreSimulator.SimDeviceType.iPad-Air "com.apple.CoreSimulator.SimRuntime.iOS-11-4"
            xcrun simctl create "iPad Air 2" com.apple.CoreSimulator.SimDeviceType.iPad-Air-2 "com.apple.CoreSimulator.SimRuntime.iOS-12-4"
            xcrun simctl create "iPad Pro (10.5-inch)" com.apple.CoreSimulator.SimDeviceType.iPad-Pro--10-5-inch- "com.apple.CoreSimulator.SimRuntime.iOS-13-6"
            xcrun simctl list devices 11.4
            xcrun simctl list devices 12.4
            xcrun simctl list devices 13.6
            instruments -s
        - name: Build and test on iPhones
          run: bundle exec fastlane run_ci_tests devices:"${destination}" --verbose
          env:
            destination: ${{ '["platform=iOS Simulator,OS=11.4,name=iPhone 8","platform=iOS Simulator,OS=12.4,name=iPhone SE","platform=iOS Simulator,OS=13.6,name=iPhone X","iPhone 11"]' }}
        - name: Build and test on iPads
          run: bundle exec fastlane run_ci_tests devices:"${destination}" --verbose
          env:
            destination: ${{ '["platform=iOS Simulator,OS=11.4,name=iPad Air","platform=iOS Simulator,OS=12.4,name=iPad Air 2","platform=iOS Simulator,OS=13.6,name=iPad Pro (10.5-inch)","iPad Pro (12.9-inch)"]' }}
        - name: Archive Failed Tests artifacts
          if: failure()
          uses: actions/upload-artifact@v1
          with:
            name: FailureDiff
            path: fastlane/test_output
